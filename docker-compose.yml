services:
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${SPRING_DATASOURCE_PRIMARY_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PRIMARY_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        docker-entrypoint.sh postgres \
          -c wal_level=replica \
          -c max_wal_senders=10 \
          -c max_replication_slots=10 \
          -c hot_standby=on &
        
        echo "Waiting for PostgreSQL to start..."
        until pg_isready -U inventory_user -d inventory_db 2>/dev/null; do
          sleep 1
        done
        
        echo "PostgreSQL started. Configuring replication..."
        
        if ! grep -q "host replication inventory_user" /var/lib/postgresql/data/pg_hba.conf; then
                    echo "host replication inventory_user 0.0.0.0/0 scram-sha-256" >> /var/lib/postgresql/data/pg_hba.conf
          echo "host replication inventory_user ::/0 scram-sha-256" >> /var/lib/postgresql/data/pg_hba.conf
          echo "Replication rules added to pg_hba.conf"
        
          psql -U inventory_user -d inventory_db -c "SELECT pg_reload_conf();"
          echo "Configuration reloaded!"
        fi
        
        wait
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${SPRING_DATASOURCE_REPLICA_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_REPLICA_PASSWORD}
      PGPASSWORD: ${SPRING_DATASOURCE_PRIMARY_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    depends_on:
      postgres-primary:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        echo 'Waiting for primary...'
        until pg_isready -h postgres-primary -U inventory_user; do 
          sleep 2
        done
        
        echo "Primary is ready!"
        
        sleep 5
        
        if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
          echo 'Data directory empty. Cloning from primary...'
        
          rm -rf /var/lib/postgresql/data/*
        
          pg_basebackup -h postgres-primary -U inventory_user -D /var/lib/postgresql/data -Fp -Xs -P -R
        
          echo 'Creating standby signal...'
          touch /var/lib/postgresql/data/standby.signal
        
          echo 'Configuring replica...'
          cat > /var/lib/postgresql/data/postgresql.auto.conf << 'EOF'
        primary_conninfo = 'host=postgres-primary port=5432 user=inventory_user'
        hot_standby = on
        EOF
        
          chown -R postgres:postgres /var/lib/postgresql/data
          chmod 0700 /var/lib/postgresql/data
        
          echo 'Replica configured!'
        else
          echo 'Data directory exists. Skipping clone.'
        fi
        
        echo 'Starting PostgreSQL...'
        exec docker-entrypoint.sh postgres
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s


  redis:
    image: redis:7.4-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - inventory-network

  inventory-api:
    build: .
    container_name: inventory-api
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: ${SERVER_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      SPRING_DATASOURCE_PRIMARY_JDBC_URL: ${SPRING_DATASOURCE_PRIMARY_JDBC_URL}
      SPRING_DATASOURCE_PRIMARY_USERNAME: ${SPRING_DATASOURCE_PRIMARY_USERNAME}
      SPRING_DATASOURCE_PRIMARY_PASSWORD: ${SPRING_DATASOURCE_PRIMARY_PASSWORD}
      SPRING_DATASOURCE_REPLICA_JDBC_URL: ${SPRING_DATASOURCE_REPLICA_JDBC_URL}
      SPRING_DATASOURCE_REPLICA_USERNAME: ${SPRING_DATASOURCE_REPLICA_USERNAME}
      SPRING_DATASOURCE_REPLICA_PASSWORD: ${SPRING_DATASOURCE_REPLICA_PASSWORD}
      SPRING_DATA_REDIS_HOST: ${SPRING_DATA_REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${SPRING_DATA_REDIS_PORT}
      JAVA_OPTS: ${JAVA_OPTS}
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-replica:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - inventory-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - inventory-network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    environment:
      REDIS_ADDR: ${SPRING_DATA_REDIS_HOST}:${SPRING_DATA_REDIS_PORT}
    ports:
      - "9121:9121"
    networks:
      - inventory-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "-q", "-O", "-", "http://localhost:9121/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - inventory-network

volumes:
  postgres-primary-data:
  postgres-replica-data:
  grafana-data:

networks:
  inventory-network:
    driver: bridge